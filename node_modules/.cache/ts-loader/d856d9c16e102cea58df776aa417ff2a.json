{"remainingRequest":"/home/ash/Documents/cloudrun/second/frontend/node_modules/babel-loader/lib/index.js!/home/ash/Documents/cloudrun/second/frontend/node_modules/ts-loader/index.js??ref--14-2!/home/ash/Documents/cloudrun/second/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/ash/Documents/cloudrun/second/frontend/src/auth/authenticate.ts","dependencies":[{"path":"/home/ash/Documents/cloudrun/second/frontend/src/auth/authenticate.ts","mtime":1601932087349},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvYXNoL0RvY3VtZW50cy9jbG91ZHJ1bi9zZWNvbmQvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgeyBjcmVhdGVHdWVzdEFjY291bnQsIGZldGNoTWUgfSBmcm9tICcuLi9ncmFwaHFsL3F1ZXJpZXMvYXV0aCc7CmltcG9ydCB7IGFwb2xsb0NsaWVudCB9IGZyb20gJy4uL2dyYXBocWwvY2xpZW50JzsKaW1wb3J0IHsgc3RvcmVBdXRoVG9rZW4gfSBmcm9tICcuLi91dGlscy9hdXRoVG9rZW4nOwppbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnOwpleHBvcnQgdmFyIGF1dGhlbnRpY2F0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICB2YXIgcmVzdWx0LCBhdXRoVG9rZW4sIGN1cnJlbnRVc2VyOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBhcG9sbG9DbGllbnQucXVlcnkoewogICAgICAgICAgICAgIHF1ZXJ5OiBjcmVhdGVHdWVzdEFjY291bnQKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBhdXRoVG9rZW4gPSByZXN1bHQuZGF0YS5jcmVhdGVHdWVzdEFjY291bnQ7CiAgICAgICAgICAgIHN0b3JlQXV0aFRva2VuKGF1dGhUb2tlbik7CiAgICAgICAgICAgIHN0b3JlLm11dGF0aW9ucy5zZXRJc0F1dGhlbnRpY2F0ZWQodHJ1ZSk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICByZXR1cm4gZmV0Y2hNZSgpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgY3VycmVudFVzZXIgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBzdG9yZS5tdXRhdGlvbnMuc2V0Q3VycmVudFVzZXIoY3VycmVudFVzZXIpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxMzsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgLy8gdG9hc3QuZXJyb3IoZXJyb3IpOwogICAgICAgICAgICBjb25zb2xlLmVycm9yKF9jb250ZXh0LnQwKTsKCiAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgMTNdXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gYXV0aGVudGljYXRlKCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7"},{"version":3,"sources":["/home/ash/Documents/cloudrun/second/frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/ash/Documents/cloudrun/second/frontend/src/auth/authenticate.ts"],"names":[],"mappings":";;AAAA,SAAS,kBAAT,EAA6B,OAA7B,QAA4C,yBAA5C;AACA,SAAS,YAAT,QAA6B,mBAA7B;AACA,SAAS,cAAT,QAA+B,oBAA/B;AACA,OAAO,KAAP,MAAkB,UAAlB;AAEA,OAAO,IAAM,YAAY;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEH,YAAY,CAAC,KAAb,CAAmD;AACtE,cAAA,KAAK,EAAE;AAD+D,aAAnD,CAFG;;AAAA;AAElB,YAAA,MAFkB;AAKI,YAAA,SALJ,GAKkB,MAAM,CAAC,IALzB,CAKhB,kBALgB;AAMxB,YAAA,cAAc,CAAC,SAAD,CAAd;AACA,YAAA,KAAK,CAAC,SAAN,CAAgB,kBAAhB,CAAmC,IAAnC;AAPwB;AAAA,mBAQE,OAAO,EART;;AAAA;AAQlB,YAAA,WARkB;AASxB,YAAA,KAAK,CAAC,SAAN,CAAgB,cAAhB,CAA+B,WAA/B;AATwB;AAAA;;AAAA;AAAA;AAAA;AAWxB;AACA,YAAA,OAAO,CAAC,KAAR;;AAZwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import { createGuestAccount, fetchMe } from '../graphql/queries/auth'\nimport { apolloClient } from '../graphql/client'\nimport { storeAuthToken } from '../utils/authToken'\nimport store from '../store'\n\nexport const authenticate = async () => {\n  try {\n    const result = await apolloClient.query<{ createGuestAccount: string }>({\n      query: createGuestAccount\n    })\n    const { createGuestAccount: authToken } = result.data\n    storeAuthToken(authToken)\n    store.mutations.setIsAuthenticated(true)\n    const currentUser = await fetchMe()\n    store.mutations.setCurrentUser(currentUser)\n  } catch (error) {\n    // toast.error(error);\n    console.error(error)\n  }\n}\n"],"sourceRoot":""}]}