{"remainingRequest":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ash/Documents/cloudrun/second/frontend/src/components/Project/Workorder/WorkorderDetails/WorkorderDetails.vue?vue&type=style&index=0&id=0ce612f2&lang=postcss&scoped=true&","dependencies":[{"path":"/home/ash/Documents/cloudrun/second/frontend/src/components/Project/Workorder/WorkorderDetails/WorkorderDetails.vue","mtime":1601935599674},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZvcm1GaWVsZCB7CiAgQGFwcGx5IG10LTU7Cn0KLnNlcCB7CiAgQGFwcGx5IG10LTUgYm9yZGVyIGJvcmRlci1iYWNrZ3JvdW5kTGlnaHRlc3Q7Cn0KLmZvcm1GaWVsZExhYmVsIHsKICBAYXBwbHkgYmxvY2sgcGItMS0yNSB0ZXh0LXRleHRNZWRpdW0gdGV4dC0xMyBmb250LW1lZGl1bTsKfQouZm9ybUZpZWxkVGlwIHsKICBAYXBwbHkgcHQtMS01IHRleHQtdGV4dE1lZGl1bSB0ZXh0LTEzOwp9Cg=="},{"version":3,"sources":["WorkorderDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WorkorderDetails.vue","sourceRoot":"src/components/Project/Workorder/WorkorderDetails","sourcesContent":["<template>\n  <Loader v-if=\"!workorderCopy\" />\n  <div class=\"w-full h-full\" v-else>\n    <div class=\"flex items-center px-3 pt-4 text-textDarkest\">\n      <!-- Type -->\n      <WorkorderType\n        :updateWorkorder=\"handleUpdateWorkorder\"\n        :workorderId=\"workorderCopy.id\"\n        :value=\"workorderCopy.type\"\n      />\n      <div class=\"flex-auto\"></div>\n      <j-button icon=\"feedback\" variant=\"empty\">Give Feedback</j-button>\n      <j-button @click=\"copyWorkorderLink\" icon=\"link\" variant=\"empty\"\n        >Copy Link</j-button\n      >\n      <j-button @click=\"triggerWorkorderDelete\" icon=\"trash\" variant=\"empty\" />\n      <j-button\n        v-if=\"withFullScreenButton\"\n        @click=\"goFullScreen\"\n        icon=\"expand\"\n        :iconSize=\"24\"\n        variant=\"empty\"\n      />\n      <j-button\n        v-if=\"withCloseButton\"\n        @click=\"$emit('close')\"\n        icon=\"times\"\n        :iconSize=\"24\"\n        variant=\"empty\"\n      />\n    </div>\n    <div class=\"flex w-full flex-wrap pb-16 px-7\">\n      <!-- LEFT SECTION -->\n      <div class=\"sm:w-full md:w-7/12 lg:w-4/6 pr-10\">\n        <!-- Title -->\n        <WorkorderTitle\n          :updateWorkorder=\"handleUpdateWorkorder\"\n          :value=\"workorderCopy.title\"\n        />\n        <!-- Description -->\n        <WorkorderDescription\n          :updateWorkorder=\"handleUpdateWorkorder\"\n          :initialValue=\"workorderCopy.description\"\n        />\n        <!-- Comments -->\n        <div class=\"pt-10\">\n          <div class=\"font-medium text-15\">Comments</div>\n          <Comment\n            :refetchWorkorder=\"refetchWorkorder\"\n            isCreate\n            :comment=\"{\n              user: currentUser,\n              body: 'Add a comment...',\n              workorderId\n            }\"\n          />\n          <Comment\n            @delete=\"triggeCommentDelete\"\n            :refetchWorkorder=\"refetchWorkorder\"\n            :comment=\"comment\"\n            v-for=\"comment in commentsSorted\"\n            :key=\"comment.id\"\n          />\n        </div>\n      </div>\n      <!-- RIGHT SECTION -->\n      <div class=\"sm:w-full md:w-5/12 lg:w-2/6 pt-1\">\n        <!-- STATUS -->\n        <WorkorderStatus\n          :updateWorkorder=\"handleUpdateWorkorder\"\n          :value=\"workorderCopy.status\"\n        />\n        <!-- AssigneesReporter -->\n        <WorkorderAssigneesReporter\n          :reporterId=\"workorderCopy.reporterId\"\n          :userIds=\"workorderCopy.userIds\"\n          :updateWorkorder=\"handleUpdateWorkorder\"\n        />\n        <!-- PRIORITY -->\n        <WorkorderPriority\n          :value=\"workorderCopy.priority\"\n          :updateWorkorder=\"handleUpdateWorkorder\"\n        />\n        <!-- DATES -->\n        <div\n          class=\"mt-3 pt-3 leading-loose border-t border-borderLightest text-textMedium text-13\"\n        >\n          <div>\n            Created -\n            {{ formatDateTimeConversational(workorderCopy.createdAt) }}\n          </div>\n          <div>\n            Updated -\n            {{ formatDateTimeConversational(workorderCopy.updatedAt) }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  defineComponent,\n  ref,\n  computed,\n  onUnmounted\n} from '@vue/composition-api'\nimport { useClipboard } from '@/hooks/useClipboard'\nimport { Workorder } from '@/types/workorder'\nimport { useQuery, useMutation } from '@vue/apollo-composable'\nimport {\n  getWorkorderWithUsersAndComments,\n  deleteWorkorder,\n  getProjectWorkorders,\n  updateWorkorderMutation\n} from '@/graphql/queries/workorder'\nimport WorkorderLoader from '@/components/Project/WorkorderLoader.vue'\nimport Comment from './Comment.vue'\nimport WorkorderDescription from './Description.vue'\nimport WorkorderTitle from './Title.vue'\nimport WorkorderType from './Type.vue'\nimport WorkorderStatus from './Status.vue'\nimport WorkorderAssigneesReporter from './AssigneesReporter.vue'\nimport WorkorderPriority from './Priority.vue'\nimport { formatDateTimeConversational } from '@/utils/date'\nimport { getters, mutations } from '@/store'\nimport eventBus from '@/utils/eventBus'\nimport { deleteComment } from '@/graphql/queries/comment'\nimport { updateArrayItemById } from '../../../../utils/dnd'\n\nconst sortByNewest = (items: any[] = [], sortField: string) =>\n  items.sort((a, b) => -a[sortField].localeCompare(b[sortField]))\n\nexport default defineComponent({\n  components: {\n    WorkorderLoader,\n    Comment,\n    WorkorderDescription,\n    WorkorderTitle,\n    WorkorderType,\n    WorkorderStatus,\n    WorkorderAssigneesReporter,\n    WorkorderPriority\n  },\n  props: {\n    workorderId: {\n      type: [String, Number],\n      required: true\n    },\n    withCloseButton: {\n      type: Boolean,\n      default: true\n    },\n    withFullScreenButton: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup(props, { root, emit }) {\n    const workorderCopy = ref<Workorder>(null)\n    const project = computed(getters.project)\n    const currentUser = computed(getters.currentUser)\n\n    const { onResult, loading, refetch: refetchWorkorder } = useQuery<{\n      getWorkorderWithUsersAndComments: Workorder\n    }>(getWorkorderWithUsersAndComments, {\n      id: Number(props.workorderId)\n    })\n\n    onResult(res => {\n      if (res && res.data && !res.loading) {\n        workorderCopy.value = res.data.getWorkorderWithUsersAndComments\n      }\n    })\n\n    const commentsSorted = computed(() => {\n      if (!workorderCopy.value) {\n        return []\n      }\n      return sortByNewest(workorderCopy.value.comments, 'createdAt')\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setClipboard] = useClipboard()\n\n    const copyWorkorderLink = async () => {\n      const path =\n        window.location.origin +\n        root.$router.resolve({\n          name: 'workorder',\n          params: { workorderId: `${props.workorderId}` }\n        }).href\n\n      await setClipboard(path)\n    }\n\n    const goFullScreen = () => {\n      root.$router.push({\n        name: 'workorder',\n        params: { workorderId: `${props.workorderId}` }\n      })\n      emit('close')\n    }\n\n    const { mutate: mutateWorkorder } = useMutation<{\n      updateWorkorder: Workorder\n    }>(updateWorkorderMutation)\n\n    const handleUpdateWorkorder = async (fields: Partial<Workorder>) => {\n      workorderCopy.value = { ...workorderCopy.value, ...fields } as Workorder\n\n      mutations.setProject({\n        ...project.value,\n        workorders: updateArrayItemById(\n          project.value.workorders,\n          props.workorderId as string,\n          fields\n        )\n      })\n      await mutateWorkorder({\n        workorderId: Number(props.workorderId),\n        workorder: { ...fields }\n      } as any)\n      await refetchWorkorder()\n    }\n\n    const { mutate } = useMutation<{ deleteWorkorder: boolean }>(\n      deleteWorkorder\n    )\n    const { refetch: fetchProjectWorkorders } = useQuery<{\n      getProjectWorkorders: Workorder[]\n    }>(getProjectWorkorders)\n\n    /* -------- Delete Workorder -------- */\n\n    const isDeleteConfirmOpen = ref<boolean>(false)\n    const triggerWorkorderDelete = () => {\n      eventBus.$emit('toggle-workorder-delete', true, props.workorderId)\n    }\n\n    const deleteWorkorderHandler = async () => {\n      await mutate({ workorderId: Number(props.workorderId) } as any)\n      const res = await fetchProjectWorkorders()\n      if (res.data) {\n        mutations.setProject({\n          ...project.value,\n          workorders: res.data.getProjectWorkorders\n        })\n      }\n      eventBus.$emit('toggle-workorder-delete', false)\n      eventBus.$emit('toggle-workorder-details', false)\n      eventBus.$emit('toggle-workorder-search', false)\n      if (root.$route.name != 'board') {\n        root.$router.replace({ name: 'board' })\n      }\n    }\n\n    /* -------- Delete Comment -------- */\n\n    const { mutate: deleteMutation } = useMutation(deleteComment)\n\n    const triggeCommentDelete = (id: string | number) => {\n      eventBus.$emit('toggle-comment-delete', true, id)\n    }\n\n    const deleteCommentHandler = async (id: string | number) => {\n      await deleteMutation({ commentId: `${id}` } as any)\n      await refetchWorkorder()\n      eventBus.$emit('toggle-comment-delete', false)\n    }\n\n    eventBus.$on('confirm-workorder-delete', deleteWorkorderHandler)\n\n    eventBus.$on('confirm-comment-delete', deleteCommentHandler)\n\n    onUnmounted(() => {\n      eventBus.$off('confirm-workorder-delete', deleteWorkorderHandler)\n      eventBus.$off('confirm-comment-delete', deleteCommentHandler)\n    })\n\n    return {\n      currentUser,\n      project,\n      loading,\n      refetchWorkorder,\n      WorkorderStatus,\n      workorderCopy,\n      handleUpdateWorkorder,\n      copyWorkorderLink,\n      goFullScreen,\n      triggerWorkorderDelete,\n      triggeCommentDelete,\n      commentsSorted,\n      isDeleteConfirmOpen,\n      formatDateTimeConversational\n    }\n  }\n})\n</script>\n\n<style lang=\"postcss\" scoped>\n.formField {\n  @apply mt-5;\n}\n.sep {\n  @apply mt-5 border border-backgroundLightest;\n}\n.formFieldLabel {\n  @apply block pb-1-25 text-textMedium text-13 font-medium;\n}\n.formFieldTip {\n  @apply pt-1-5 text-textMedium text-13;\n}\n</style>\n\n<style lang=\"scss\" scoped>\n.error {\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 2px 10px;\n  background: #f53b57;\n  color: white;\n  font-size: 12px;\n  border-bottom-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n</style>\n"]}]}