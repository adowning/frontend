{"remainingRequest":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ash/Documents/cloudrun/second/frontend/src/components/Project/Workorder/WorkorderCreate/WorkorderCreate.vue?vue&type=style&index=0&id=3fb6544a&lang=postcss&scoped=true&","dependencies":[{"path":"/home/ash/Documents/cloudrun/second/frontend/src/components/Project/Workorder/WorkorderCreate/WorkorderCreate.vue","mtime":1601934632143},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZm9ybUZpZWxkIHsKICBAYXBwbHkgbXQtNTsKfQouc2VwIHsKICBAYXBwbHkgbXQtNSBib3JkZXIgYm9yZGVyLWJhY2tncm91bmRMaWdodGVzdDsKfQouZm9ybUZpZWxkTGFiZWwgewogIEBhcHBseSBibG9jayBwYi0xLTI1IHRleHQtdGV4dE1lZGl1bSB0ZXh0LTEzIGZvbnQtbWVkaXVtOwp9Ci5mb3JtRmllbGRUaXAgewogIEBhcHBseSBwdC0xLTUgdGV4dC10ZXh0TWVkaXVtIHRleHQtMTM7Cn0K"},{"version":3,"sources":["WorkorderCreate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WorkorderCreate.vue","sourceRoot":"src/components/Project/Workorder/WorkorderCreate","sourcesContent":["<template>\n  <div class=\"w-full h-full py-5 px-8\">\n    <div class=\"flex items-center py-3 text-textDarkest\">\n      <div class=\"text-xl\">\n        Create Workorder\n      </div>\n      <div class=\"flex-auto\"></div>\n      <j-button\n        @click=\"$emit('close')\"\n        icon=\"x\"\n        :iconSize=\"24\"\n        variant=\"empty\"\n      />\n    </div>\n    <form novalidate autocomplete=\"off\">\n      <div class=\"formField\">\n        <label for=\"Workordertype\" class=\"formFieldLabel\">Workorder type</label>\n        <j-select\n          id=\"Workordertype\"\n          :value=\"WorkorderCreateObject.type\"\n          searchable\n          :options=\"\n            Object.values(WorkorderType).map(type => ({\n              value: type,\n              label: WorkorderTypeCopy[type],\n              icon: WorkorderTypeCopy[type].toLowerCase()\n            }))\n          \"\n          @change=\"setFieldValue('type', $event)\"\n          customRender\n        >\n          <template v-slot:default=\"{ label, icon }\">\n            <div class=\"my-px mr-4 flex items-center\">\n              <j-icon class=\"mr-1\" :size=\"16\" :name=\"icon\"></j-icon>\n              <div class=\"pr-1 pl-2\">\n                {{ label }}\n              </div>\n            </div>\n          </template>\n        </j-select>\n        <div class=\"formFieldTip\">\n          Start typing to get a list of possible matches.\n        </div>\n      </div>\n      <div class=\"sep\"></div>\n      <div class=\"formField \">\n        <label class=\"formFieldLabel\" for=\"summary\">Short Summary</label>\n        <div class=\"relative\">\n          <j-input\n            :value=\"WorkorderCreateObject.title\"\n            id=\"summary\"\n            @input=\"setFieldValue('title', $event)\"\n          />\n        </div>\n\n        <div class=\"formFieldTip\">\n          Concisely summarize the Workorder in one or two sentences.\n        </div>\n      </div>\n\n      <div class=\"formField \">\n        <label class=\"formFieldLabel\" for=\"description\">Description</label>\n        <j-text-editor\n          :mode=\"`write`\"\n          @input=\"setFieldValue('description', $event)\"\n          class=\"descriptionEditor\"\n          id=\"description\"\n        />\n        <div class=\"formFieldTip\">\n          Describe the Workorder in as much detail as you'd like.\n        </div>\n      </div>\n      <div class=\"formField \">\n        <label class=\"formFieldLabel\" for=\"reporter\">Reporter</label>\n        <j-select\n          id=\"reporter\"\n          searchable\n          :value=\"WorkorderCreateObject.reporterId\"\n          :options=\"projectUsers\"\n          customRender\n          @change=\"setFieldValue('reporterId', $event)\"\n        >\n          <template v-slot:default=\"{ label, user, remove, optionValue }\">\n            <div class=\"my-px mr-4 flex items-center\">\n              <j-avatar\n                :size=\"20\"\n                :avatarUrl=\"user.avatarUrl\"\n                :name=\"user.name\"\n              />\n              <div class=\"pr-1 pl-2\">\n                {{ label }}\n              </div>\n              <j-icon\n                v-if=\"remove\"\n                @click=\"remove(optionValue)\"\n                class=\"text-textLight\"\n                :size=\"20\"\n                name=\"times\"\n              ></j-icon>\n            </div>\n          </template>\n        </j-select>\n      </div>\n      <div class=\"formField \">\n        <label class=\"formFieldLabel\" for=\"userIds\">Assignees</label>\n        <j-select\n          id=\"userIds\"\n          :value=\"WorkorderCreateObject.userIds\"\n          searchable\n          :options=\"projectUsers\"\n          :isMulti=\"true\"\n          @change=\"setFieldValue('userIds', $event)\"\n          customRender\n        >\n          <template v-slot:default=\"{ label, user, remove, optionValue }\">\n            <div class=\"my-px mr-4 flex items-center\">\n              <j-avatar\n                :size=\"20\"\n                :avatarUrl=\"user.avatarUrl\"\n                :name=\"user.name\"\n              />\n              <div class=\"pr-1 pl-2\">\n                {{ label }}\n              </div>\n              <j-icon\n                v-if=\"remove\"\n                @click=\"remove(optionValue)\"\n                class=\"text-textLight\"\n                :size=\"20\"\n                name=\"times\"\n              ></j-icon>\n            </div>\n          </template>\n        </j-select>\n      </div>\n      <div class=\"formField \">\n        <label class=\"formFieldLabel\" for=\"priority\">Priority</label>\n        <j-select\n          id=\"priority\"\n          :value=\"WorkorderCreateObject.priority\"\n          searchable\n          :options=\"\n            Object.values(WorkorderPriority).map(p => ({\n              value: p,\n              label: WorkorderPriorityCopy[p],\n              icon: p < 3 ? 'arrow-down' : 'arrow-up',\n              color: WorkorderPriorityColors[p]\n            }))\n          \"\n          customRender\n          @change=\"setFieldValue('priority', $event)\"\n        >\n          <template v-slot:default=\"{ label, icon, color }\">\n            <div class=\"my-px mr-4 flex items-center\">\n              <j-icon :style=\"{ color }\" :size=\"20\" :name=\"icon\"></j-icon>\n\n              <div class=\"pr-1 pl-2\">\n                {{ label }}\n              </div>\n            </div>\n          </template>\n        </j-select>\n        <div class=\"formFieldTip\">\n          Priority in relation to other Workorders.\n        </div>\n      </div>\n      <div class=\"formField flex justify-end items-center\">\n        <j-button\n          :isWorking=\"isWorking\"\n          @click.prevent=\"handleSubmit\"\n          :disabled=\"!isValidDTO\"\n          class=\"ml-3\"\n          variant=\"primary\"\n          >Create</j-button\n        >\n        <j-button\n          @click.prevent=\"$emit('close')\"\n          class=\"ml-3\"\n          variant=\"secondary\"\n          >Cancel</j-button\n        >\n      </div>\n    </form>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, reactive, ref } from '@vue/composition-api'\nimport { getters, mutations } from '@/store'\nimport {\n  Workorder,\n  WorkorderType,\n  WorkorderPriority,\n  WorkorderPriorityCopy,\n  WorkorderTypeCopy,\n  WorkorderStatus,\n  WorkorderCreateDTO\n} from '@/types/workorder'\nimport { WorkorderPriorityColors } from '@/utils/colors'\nimport { useMutation, useQuery } from '@vue/apollo-composable'\nimport {\n  createWorkorder,\n  getProjectWorkorders\n} from '@/graphql/queries/workorder'\nimport Omit from 'lodash.omit'\nimport { successToast, errorToast } from '../../../../plugins/toast'\ntype fieldType =\n  | 'type'\n  | 'title'\n  | 'description'\n  | 'reporterId'\n  | 'userIds'\n  | 'priority'\n  | 'status'\nexport default defineComponent({\n  setup(_, { emit }) {\n    const project = computed(getters.project)\n    const currentUser = computed(getters.currentUser)\n    const projectUsers = computed(() => {\n      if (!project.value) return []\n      return project.value.users.map(user => ({\n        value: user.id,\n        label: user.name,\n        user\n      }))\n    })\n\n    const defaultWorkorderValues = {\n      type: WorkorderType.TASK,\n      title: '',\n      description: '',\n      reporterId: currentUser.value.id,\n      userIds: [],\n      priority: WorkorderPriority.MEDIUM\n    }\n\n    const WorkorderCreateObject = reactive<WorkorderCreateDTO>(\n      defaultWorkorderValues\n    )\n    const isRequired = (value: string) =>\n      ['', null, undefined].indexOf(value) === -1\n\n    const isValidDTO = computed(\n      () =>\n        isRequired(WorkorderCreateObject.type) &&\n        isRequired(WorkorderCreateObject.title) &&\n        isRequired(WorkorderCreateObject.reporterId) &&\n        isRequired(WorkorderCreateObject.priority)\n    )\n\n    // eslint-disable-next-line\n    const setFieldValue = (field: fieldType, value: any) => {\n      WorkorderCreateObject[field] = (value as unknown) as never\n    }\n\n    const loading = ref<boolean>(false)\n\n    const { mutate, loading: isMutationLoading } = useMutation(createWorkorder)\n    const {\n      refetch: fetchProjectWorkorders,\n      loading: isFetchWorkordersLoading\n    } = useQuery<{\n      getProjectWorkorders: Workorder[]\n    }>(getProjectWorkorders)\n\n    const isWorking = computed(\n      () => loading.value && isFetchWorkordersLoading && isMutationLoading\n    )\n\n    const getUserById = (userId: string) =>\n      Omit(\n        project.value.users.find(user => user.id === userId),\n        ['__typename', 'name', 'avatarUrl', 'projectId']\n      )\n\n    const handleSubmit = async () => {\n      loading.value = true\n      const Workorder: WorkorderCreateDTO = {\n        ...WorkorderCreateObject,\n        status: WorkorderStatus.BACKLOG,\n        projectId: project.value.id,\n        users: WorkorderCreateObject.userIds.map(getUserById)\n      }\n      try {\n        // eslint-disable-next-line\n        await mutate({ Workorder } as any)\n        const res = await fetchProjectWorkorders()\n        if (res.data) {\n          mutations.setProject({\n            ...project.value,\n            workorders: res.data.getProjectWorkorders\n          })\n        }\n        loading.value = false\n        emit('close')\n        successToast('Workorder has been successfully created').showToast()\n      } catch (error) {\n        console.error(error)\n        emit('close')\n      }\n    }\n\n    return {\n      WorkorderCreateObject,\n      projectUsers,\n      WorkorderType,\n      isValidDTO,\n      WorkorderTypeCopy,\n      WorkorderPriority,\n      WorkorderPriorityCopy,\n      WorkorderPriorityColors,\n      setFieldValue,\n      handleSubmit,\n      isWorking\n    }\n  }\n})\n</script>\n\n<style lang=\"postcss\" scoped>\n.formField {\n  @apply mt-5;\n}\n.sep {\n  @apply mt-5 border border-backgroundLightest;\n}\n.formFieldLabel {\n  @apply block pb-1-25 text-textMedium text-13 font-medium;\n}\n.formFieldTip {\n  @apply pt-1-5 text-textMedium text-13;\n}\n</style>\n\n<style lang=\"scss\">\n.descriptionEditor .ql-editor {\n  min-height: 110px;\n}\n</style>\n"]}]}