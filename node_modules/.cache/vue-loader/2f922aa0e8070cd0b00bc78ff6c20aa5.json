{"remainingRequest":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ash/Documents/cloudrun/second/frontend/src/components/shared/Avatar/Avatar.vue?vue&type=style&index=0&id=5e6d9035&lang=postcss&scoped=true&","dependencies":[{"path":"/home/ash/Documents/cloudrun/second/frontend/src/components/shared/Avatar/Avatar.vue","mtime":1601932087349},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ash/Documents/cloudrun/second/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5sZXR0ZXIgewogIEBhcHBseSBiZy1wcmltYXJ5IGlubGluZS1ibG9jayByb3VuZGVkLXNtIHVwcGVyY2FzZSB0ZXh0LXdoaXRlOwp9Ci5sZXR0ZXIgPiBzcGFuIHsKICBAYXBwbHkgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgaC1mdWxsOwp9Cg=="},{"version":3,"sources":["Avatar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;AACA;AACA;AACA;AACA","file":"Avatar.vue","sourceRoot":"src/components/shared/Avatar","sourcesContent":["<template>\n  <div :style=\"getImageStyle\" v-if=\"avatarUrl\" />\n  <div v-else :style=\"getLetterStyle\" class=\"letter\">\n    <span v-if=\"!empty\">\n      <slot />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { avatarColors } from '@/utils/colors'\nimport { computed, defineComponent } from '@vue/composition-api'\nexport default defineComponent({\n  name: 'j-avatar',\n  props: {\n    avatarUrl: {\n      type: String,\n      default: null\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    size: {\n      type: Number,\n      default: 32\n    },\n    rounded: {\n      type: Boolean,\n      default: true\n    }\n  },\n  setup(props) {\n    const getImageStyle = computed(() => ({\n      display: 'inline-block',\n      width: `${props.size}px`,\n      height: `${props.size}px`,\n      'border-radius': props.rounded ? '100%' : '3px',\n      backgroundImage: `url('${props.avatarUrl}')`,\n      backgroundPosition: '50% 50%',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover'\n    }))\n\n    const getColorFromName = computed(\n      () =>\n        avatarColors[\n          props.name.toLocaleLowerCase().charCodeAt(0) % avatarColors.length\n        ]\n    )\n\n    const getLetterStyle = computed(() => ({\n      width: `${props.size}px`,\n      height: `${props.size}px`,\n      background: getColorFromName.value,\n      fontSize: `${Math.round(props.size / 2)}px`\n    }))\n\n    return {\n      getImageStyle,\n      getLetterStyle\n    }\n  }\n})\n</script>\n\n<style lang=\"postcss\" scoped>\n.letter {\n  @apply bg-primary inline-block rounded-sm uppercase text-white;\n}\n.letter > span {\n  @apply flex items-center justify-center h-full;\n}\n</style>\n"]}]}